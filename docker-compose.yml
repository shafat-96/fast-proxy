version: "3.8"

services:
  server:
    build:
      context: .
    environment:
      NODE_ENV: production
    deploy:
      replicas: 2
      endpoint_mode: dnsrr
      resources:
        limits:
          cpus: "2.0"
          memory: "3584M"
        reservations:
          cpus: "0.5"
          memory: "512M"

    restart: always
    env_file:
      - .env
    # Expose port 3000 to the internal network; Nginx will proxy to this
    expose:
      - "3000"

  nginx:
    image: nginx:1.25
    depends_on:
      - server
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./letsencrypt:/etc/letsencrypt
      - ./certbot-www:/var/www/certbot
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.2"
          memory: "512M"
        reservations:
          cpus: "0.1"
          memory: "256M"
    healthcheck:
      test: ["CMD-SHELL", "nginx -t || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: always

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - ./letsencrypt:/etc/letsencrypt
      - ./certbot-www:/var/www/certbot
    entrypoint: sh -c "trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot && echo 'Renew checked'; sleep 12h & wait $!; done"
    depends_on:
      - nginx
    restart: always

  autoheal:
    image: willfarrell/autoheal:latest
    deploy:
      replicas: 1
    environment:
      AUTOHEAL_CONTAINER_LABEL: all
    network_mode: none
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    environment:
      WATCHTOWER_LABEL_ENABLE: "true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 300
    restart: always